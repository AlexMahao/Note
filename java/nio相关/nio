## NIO相关
NIO 与原来的 I/O 有同样的作用和目的，提供类似于流式的输入和输出操作，但与io不同在于，io是直接操作数据流，只能够进行一个或者多个字节的读取，无法对流进行操作读取之前的数据，而NIO是作用于块的（缓冲区），能够更加方便的操作数据。

其次对于io操作，nio提供了非阻塞式的io操作，对于Socket等，能够使用一个线程处理对个网络任务。

### 通道和缓冲区

通道和缓冲区是nio中最重要的概念。

通道是对原 I/O 包中的流的模拟。所有数据都输入输出操作都必须通过一个 通道（Channel） 对象，可以通过它读取和写入数据。

Buffer 是一个对象， 它包含一些要写入或者刚读出的数据，一个 Buffer 实质上是一个容器对象。发送给一个通道的所有对象都必须首先放到缓冲区中；同样地，从通道中读取的任何数据都要读到缓冲区中。

在 NIO 库中，所有数据都是用缓冲区处理的。在读取数据时，它是直接读到缓冲区中的。在写入数据时，它是写入到缓冲区中的。任何时候访问 NIO 中的数据，您都是将它放到缓冲区中。

缓冲区实质上是一个数组。通常它是一个字节数组，但是也可以使用其他种类的数组。但是一个缓冲区不 仅仅 是一个数组。缓冲区提供了对数据的结构化访问，而且还可以跟踪系统的读/写进程。

基于此，整个数据的交换流程： 通道（入）-> 缓冲区（操作数据）-> 通道（出）

### 关键的Channel（通道） 

- FileChannel （操作文件）
- DatagramChannel （UDP）
- SocketChannel （TCP）
- ServerSocketChannel （TCP）

涵盖了UDP和TCP的IO以及文件IO

### 关键的Buffer（缓存）

- ByteBuffer
- CharBuffer
- DoubleBuffer
- FloatBuffer
- IntBuffer
- LongBuffer
- ShortBuffer

###  利用NIO实现文件读写操作

```
import java.io.*;
import java.nio.*;
import java.nio.channels.*;

public class CopyFile{

  public static  void main( String args[] ) throws Exception {
    if (args.length<2) {
      System.err.println( "Usage: java CopyFile infile outfile" );
      System.exit( 1 );
    }
    // 1,获取参数
    String infile = args[0];
    String outfile = args[1];
    // 2，获取对应的输入和输出流
    FileInputStream fin = new FileInputStream( infile );// 获取输入流
    FileOutputStream fout = new FileOutputStream( outfile ); // 获取输出流
    // 3，根据流获取通道
    FileChannel fcin = fin.getChannel(); // 获取源文件通道
    FileChannel fcout = fout.getChannel(); // 获取目标文件通道

    // 4，创建字节缓冲区
    ByteBuffer buffer = ByteBuffer.allocate( 1024 ); 

    while (true) {
      // 5，重设缓冲区，使他可以接受读入数据
      buffer.clear(); 
      // 6，读取内容到缓冲区
      int r = fcin.read( buffer ); // position = 读取数据的长度
      // 7，判断数据是否读取完成
      if (r==-1) {
        break;
      }
      // 8，让缓冲区的数据可以将新读入的数据写入到另一个通道
      buffer.flip();
      //9，写入缓冲区
      fcout.write( buffer );
    }
  }
}

```
总共分了九个流程

1，2是分别获取对应的输入和输出流。

第3步根据输入和输出流获取对应的通道。

第4步获取一个1024字节缓存区。然后循环区遍历这个通道，不断的从读入到缓存区，再从缓存区中写出。

其中，`buffer.clear(); `和`buffer.flip();`是很关键两个方法，`clear()`方法表示清空缓冲区，让他可以继续读入内容。`flip()`表示从读入模式转化为写出模式。具体的原理往下看。

### 缓冲区内部细节

在上面的例子中，为什么在读入和写出时需要调`clear()`和`flip()`，这要从缓冲区的原理说起。

在缓冲区中，有三个字段用以表示缓冲区任意时刻的状态。

- position
- limit
- capacity

这三个变量一起可以跟踪缓冲区的状态和它所包含的数据.

**postion**

缓冲区实际就是对数组做了一层包装，在从通道中读取的数据实际是放入了数组中。`position`变量跟踪已经写了多少数据。更准确地说，它指定了下一个字节将放到数组的哪一个元素中。

因此，如果从通道中读三个字节到缓冲区中，那么缓冲区的`position`将会设置为3，指向数组中第四个元素。同样，在写入通道时，您是从缓冲区中获取数据。`position`值跟踪从缓冲区中获取了多少数据。更准确地说，它指定下一个字节来自数组的哪一个元素。因此如果从缓冲区写了5个字节到通道中，那么缓冲区的`position`将被设置为5，指向数组的第六个元素。

**limit**

`limit` 变量表明有多少数据可以取出(在从缓冲区写入通道时)，或者有多少空间可以放入数据(在从通道读入缓冲区时)。

`position` 总是小于或者等于 `limit`。

如果从索引偏移上理解，`position`表示当前指针的位置，无论读或者写，都从当前指针位置开始。`limit`在读的时候，表示缓存可容纳的数据大小，在写出时，表示可写出的数据大小。

**capacity**
缓冲区的 `capacity` 表明可以储存在缓冲区中的最大数据容量。实际上，它指定了底层数组的大小 ― 或者至少是指定了准许我们使用的底层数组的容量。
`limit` 决不能大于 `capacity`。

### 流程分析

**初始状态**
假设对于一个八个字节的缓冲区，他的初始状态如图

![](nio2.gif)

当然最后一个圆圈表示假设，即表示当前可存储的最大值。

position 设置为0。如果我们读一些数据到缓冲区中，那么下一个读取的数据就进入 slot 0 。如果我们从缓冲区写一些数据，从缓冲区读取的下一个字节就来自 slot 0 。

![](nio3.gif)

此时，所有状态已经准备就绪。

**第一次读取**

首先从输入通道中读一些数据到缓冲区中。第一次读取得到三个字节。它们被放到数组中从 position 开始的位置，这时 position 被设置为 0。读完之后，position 就增加到 3。

![](nio4.gif)

注意：limit没有被改变。

**第二次读取**

在第二次读取时，我们从输入通道读取另外两个字节到缓冲区中。这两个字节储存在由 position 所指定的位置上， position 因而增加 2，继续向右偏移

![](nio5.gif)

**flip**

下面将要进行写出操作，在这之前必须调用`flip()`，该方法的目的是为了初始化position和limit。

- 将 limit 设置为当前 position
- 将 position 设置为 0

调用过`flip()`方法之后如下

![](nio6.gif)

现在可以将数据从缓冲区写入通道了。 position 被设置为 0，这意味着我们得到的下一个字节是第一个字节。 limit 已被设置为原来的 position，这意味着它包括以前读到的所有字节，并且一个字节也不多

**第一次写入**

在第一次写入时，我们从缓冲区中取四个字节并将它们写入输出通道。这使得 position 增加到 4，而 limit 不变，如下所示

![](nio7.gif)

重复写入操作类似。

**clear()**

该方法是和`flip()`类似，他也是重设position和limit，不过他和`flip()`的作用正好相反。
- 将 limit 设置为与 capacity 相同。
- 设置 position 为 0
![](nio8.gif)

总结：`clear()`和`flip()`

- `clear`相当于重置所有状态，将position置为0，limit置为capacity，重新开始接受数据。
- `flip()`相当于反转，将limit置为当前position，positon置为0，从头开始输出数据。

### 访问方法

- byte get()  --> ByteBuffer put( byte b )
- ByteBuffer get( byte dst[] ) -->	ByteBuffer put( byte src[] )
- ByteBuffer get( byte dst[], int offset, int length ) -->	ByteBuffer put( byte src[], int offset, int length );
- byte get( int index ) -->	ByteBuffer put( int index, byte b );

如上为`get`和`put`对应方法。

其中前三组方法，会影响缓存区的索引，即取多少数据，position会向后偏移对应的。而第四组方法不会影响缓存区的索引。

### 文件锁

```java

import java.io.*;
import java.nio.*;
import java.nio.channels.*;

public class UseFileLocks
{
  static private final int start = 10;
  static private final int end = 20;

  static public void main( String args[] ) throws Exception {
    //1,创建通道
    RandomAccessFile raf = new RandomAccessFile( "usefilelocks.txt", "rw" );
    FileChannel fc = raf.getChannel();

    System.out.println( "trying to get lock" );
    // 2， 加锁
    FileLock lock = fc.lock( start, end, false );
    System.out.println( "got lock!" );

    // 3，暂停
    System.out.println( "pausing" );
    try { Thread.sleep( 3000 ); } catch( InterruptedException ie ) {}

    System.out.println( "going to release lock" );
    // 4，释放锁
    lock.release();
    System.out.println( "released lock" );
    
    raf.close();
  }
}
```

### 连网和异步 I/O

对于同步io来说，`accept()`,`read()`,`write()`方法都是阻塞方法，非常的耗时，但这些阻塞并没有使用`cpu`，所以为了节省时间，往往使用多线程去处理，每一个网络链接都通过一个单独的线程去处理，但线程的切换会非常消耗资源。而nio能够通过一个线程处理解决这一状况。

对于nio来说，我们只需要注册`accept()`等一系列阻塞操作，之后我们可以通过调用`select()`方法判断是否有我们监听的事件就绪，如果有，会返回事件的数量，如果没有，则等待事件的到来。同样可以使用非阻塞的`selectNow()`,该方法会立即返回，如果没有事件就绪，会返回0。这样对于多个事件，我们可以在统一的线程中去处理，无需起多个线程。


#### 具体实现
该类实现如下功能，绑定对个端口，并监听端口的网络数据，当有数据来临时，对数据读取之后在写回到客户端。

```java 
 private void go() throws IOException {
    // 1，创建用以监听各个事件的处理器
    Selector selector = Selector.open();

    for (int i=0; i<ports.length; ++i) {
      // 2，创建ServerSocket通道，并设置为非阻塞式
      ServerSocketChannel ssc = ServerSocketChannel.open();
      ssc.configureBlocking( false );
      // 3，绑定端口号
      ServerSocket ss = ssc.socket();
      InetSocketAddress address = new InetSocketAddress( ports[i] );
      ss.bind( address );
      // 4，注册监听事件，监听accept()方法
      SelectionKey key = ssc.register( selector, SelectionKey.OP_ACCEPT );

      System.out.println( "Going to listen on "+ports[i] );
    }

    while (true) {
      // 5，至少有一个以注册的事件发生时，返回发生事件的数量，非阻塞的，如果没有事件到来，返回0
      int num = selector.select();
      // 6，发生事件监听对象的集合
      Set selectedKeys = selector.selectedKeys();
      Iterator it = selectedKeys.iterator();

      while (it.hasNext()) {
        // 7，获取监听回调对象
        SelectionKey key = (SelectionKey)it.next();

        if ((key.readyOps() & SelectionKey.OP_ACCEPT) == SelectionKey.OP_ACCEPT) {
          //8，如果是accept事件，处理
          ServerSocketChannel ssc = (ServerSocketChannel)key.channel();
          SocketChannel sc = ssc.accept();
          sc.configureBlocking( false );

          // 9，注册新的监听，读取事件
          SelectionKey newKey = sc.register( selector, SelectionKey.OP_READ );
          // 10，删除处理过的SelectionKey
          it.remove();

          System.out.println( "Got connection from "+sc );
        } else if ((key.readyOps() & SelectionKey.OP_READ) == SelectionKey.OP_READ) {
          // 11， 处理读取事件
          SocketChannel sc = (SocketChannel)key.channel();
          int bytesEchoed = 0;
          while (true) {
            echoBuffer.clear();
            int r = sc.read( echoBuffer );
            if (r<=0) {
              break;
            } 
            echoBuffer.flip();
            sc.write( echoBuffer );
            bytesEchoed += r;
          }
          System.out.println( "Echoed "+bytesEchoed+" from "+sc );
          it.remove();
        }
      }
    }
  }
```

首先，创建了`Selector`对象，该对象用以控制事件的监听和注册，不同的对象调用`register()`方法将自己感兴趣的事情注册到`Selector`上。

第2~4步创建`ServerSocket`并绑定端口，同时将`accept()`方法注册到`Selector`方法，这里为什么只注册`accept()`方法呢，因为对于读写操作，肯定是在`accept()`方法之后做出里，所以对于这些事件的监听应该放到`accept()`方法来临之后去处理。

` ssc.configureBlocking( false );`设置通道为非阻塞式，这样读写等会立即返回数据。

第5步为关键步骤，通过调用`select()`方法获取事件就绪状态的数量，该方法为阻塞方法。

第7步获取对应事件的监听对象，通过该对象确定发生的是什么 I/O 事件，以及这个事件影响哪些 I/O 对象。

第8~10步获取`SocketChannel`并注册新的事件。

第11步对事件进行处理。

>注意：
> -  与`Selector`一起使用时，`Channel`必须处于非阻塞模式下。这意味着不能将`FileChannel`与`Selector`一起使用，因为`FileChannel`不能切换到非阻塞模式。而套接字通道都可以。
> -  `register()`方法的第二个参数。这是一个“interest集合”，意思是在通过`Selector`监听`Channel`时对什么事件感兴趣。
> -  socket主要的读、写、注册和接收函数，在等待就绪阶段都是非阻塞的，真正的I/O操作是同步阻塞的（消耗CPU但性能非常高）


参考链接【[NIO 入门](https://www.ibm.com/developerworks/cn/education/java/j-nio/j-nio.html#icomments)】





















 